{"version":3,"file":"static/js/242.d396e71e.chunk.js","mappings":"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","sources":["features/new-user-process/images/priceGiftIcon.svg","webpack://my-app/./src/features/new-user-process/components/PlanCard/PlanCard.module.scss?9acf","features/new-user-process/images/planInfoIcon.svg","features/new-user-process/components/PlanCard/PlanCard.tsx","redux_services/thunk-functions/getPlanInfo.ts","webpack://my-app/./src/features/new-user-process/components/serviceIncludes/serviceIncludes.module.scss?476a","features/new-user-process/components/serviceIncludes/serviceIncludes.tsx","features/new-user-process/pages/service-card.tsx","redux_services/thunk-functions/getServicePlans.ts","redux_services/thunk-functions/getServiceCategories.ts","redux_services/thunk-functions/getExclusivePosters.ts","redux_services/thunk-functions/getPopularPosters.ts"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPriceGiftIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 12,\n    viewBox: \"0 0 12 12\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.53 0.964864C3.585 0.959864 2.665 1.86986 3.085 2.99986H1.5C1.23478 2.99986 0.98043 3.10522 0.792893 3.29276C0.605357 3.48029 0.5 3.73465 0.5 3.99986V4.99986C0.5 5.13247 0.552678 5.25965 0.646447 5.35342C0.740215 5.44719 0.867392 5.49986 1 5.49986H5.5V3.99986H6.5V5.49986H11C11.1326 5.49986 11.2598 5.44719 11.3536 5.35342C11.4473 5.25965 11.5 5.13247 11.5 4.99986V3.99986C11.5 3.73465 11.3946 3.48029 11.2071 3.29276C11.0196 3.10522 10.7652 2.99986 10.5 2.99986H8.915C9.5 1.36486 7.3 0.209864 6.285 1.61986L6 1.99986L5.715 1.60986C5.4 1.16486 4.965 0.969864 4.53 0.964864ZM4.5 1.99986C4.945 1.99986 5.17 2.53986 4.855 2.85486C4.54 3.16986 4 2.94486 4 2.49986C4 2.36726 4.05268 2.24008 4.14645 2.14631C4.24021 2.05254 4.36739 1.99986 4.5 1.99986ZM7.5 1.99986C7.945 1.99986 8.17 2.53986 7.855 2.85486C7.54 3.16986 7 2.94486 7 2.49986C7 2.36726 7.05268 2.24008 7.14645 2.14631C7.24021 2.05254 7.36739 1.99986 7.5 1.99986ZM1 5.99986V9.99986C1 10.2651 1.10536 10.5194 1.29289 10.707C1.48043 10.8945 1.73478 10.9999 2 10.9999H10C10.2652 10.9999 10.5196 10.8945 10.7071 10.707C10.8946 10.5194 11 10.2651 11 9.99986V5.99986H6.5V9.99986H5.5V5.99986H1Z\",\n    fill: \"#7DD27C\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPriceGiftIcon);\nexport default __webpack_public_path__ + \"static/media/priceGiftIcon.e12670f000229cca1e08ce38d08520a0.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"mainBackgroundColor\":\"#fff\",\"mainButtonColor\":\"#fee600\",\"mainTextFontColor\":\"#2b2d33\",\"additionalTextColor\":\"#aaabad\",\"buttonBorderColor\":\"#d5d5d6\",\"descriptionTextColor\":\"#282b2e\",\"suspendButtonText\":\"#ee505a\",\"suspendButtonBackgroundColor\":\"#fdeeee\",\"priceIconColor\":\"#7dd27c\",\"planSelectedBackground\":\"#fff4e8\",\"planSelectedTextColor\":\"#fcb664\",\"planItemWrapper\":\"PlanCard_planItemWrapper__EG2Zp\",\"planTitle\":\"PlanCard_planTitle__rvg5x\",\"priceTitle\":\"PlanCard_priceTitle__01Fv1\",\"totalPriceWrapper\":\"PlanCard_totalPriceWrapper__dO1Lg\",\"pricePeriod\":\"PlanCard_pricePeriod__L8bM-\",\"priceDescription\":\"PlanCard_priceDescription__zo+Ja\",\"giftDescription\":\"PlanCard_giftDescription__REMKv\",\"infoButton\":\"PlanCard_infoButton__VyjVX\",\"modalWrapper\":\"PlanCard_modalWrapper__bGIQr\",\"modalContentTextTariff\":\"PlanCard_modalContentTextTariff__Z2ilY\",\"modalTitle\":\"PlanCard_modalTitle__Bchk1\",\"includesList\":\"PlanCard_includesList__sC9v2\"};","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPlanInfoIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.41 12.01H9V10.01H12C12.6 10.01 13 10.41 13 11.01V16.01H15V18.01H9V16.01H11V13.88C11 12.82 11.53 12.26 12.41 12.13V12.01ZM12 20C16.42 20 20 16.42 20 12C20 7.58 16.42 4 12 4C7.58 4 4 7.58 4 12C4 16.42 7.58 20 12 20ZM12 22C6.48 22 2 17.52 2 12C2 6.48 6.48 2 12 2C17.52 2 22 6.48 22 12C22 17.52 17.52 22 12 22ZM13.5 7.51C13.5 8.34 12.83 9.01 12 9.01C11.17 9.01 10.5 8.34 10.5 7.51C10.5 6.68 11.17 6.01 12 6.01C12.83 6.01 13.5 6.68 13.5 7.51Z\",\n    fill: \"#AAABAD\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPlanInfoIcon);\nexport default __webpack_public_path__ + \"static/media/planInfoIcon.96f72d12ed4bd5143df7df83e8e4f687.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect } from \"react\";\nimport giftIcon from \"../../images/priceGiftIcon.svg\";\nimport CustomButton from \"../../../../global-components/Button/Button\";\nimport variables from \"../../../../styles-utils/variables.scss\";\nimport PlanCardStyles from \"./PlanCard.module.scss\";\nimport infoIcon from \"../../images/planInfoIcon.svg\";\nimport Modal from \"../../../../global-components/Modal/Modal\";\nimport { getPlanInfo } from \"../../../../redux_services/thunk-functions/getPlanInfo\";\nimport { getSelectedPlanInfo } from \"../../../../redux_services/selectors\";\nimport { useAppDispatch, useAppSelector } from \"../../../../utils/hooks\";\nimport { AppDispatch } from \"../../../../redux_services/store\";\nimport { IPlanCondition} from \"../../../../utils/types\";\nimport { getSubscription } from \"../../../../redux_services/slices/subscriptionProcessSlice\"; \nimport Loading from \"../../../../global-components/Loading/Loading\";\nimport { formatDescription } from \"../../../../utils/formats\";\n\ninterface IPlanCardProps {\n  planTitle?: string;\n  planDescription?: string;\n  planPrice?: number;\n  planPeriod?: string;\n  pricePeriod?: string;\n  planId: string;\n  serviceID: string | undefined;\n  isSelected: boolean;\n  logo: string;\n  title: string;\n  onSelect: (trialPeriodDetails: { count: number; period: string; price: number }) => void;\n  onPlanSelect: (planDetails: IPlanCondition) => void;\n}\n\nfunction PlanCard({\n  planTitle,\n  planDescription,\n  planId,\n  title,\n  serviceID,\n  isSelected,\n  onSelect,\n  onPlanSelect,\n  logo\n}: IPlanCardProps) {\n  const dispatch: AppDispatch = useAppDispatch();\n  const planInfo = useAppSelector((state) =>\n    getSelectedPlanInfo(state, planId)\n  );\n\n\n  const handlePlanSelect = () => {\n    if (planInfo) {\n      dispatch(getSubscription({\n        logo: {logo}, \n        price: planInfo.condition?.price,\n        period: planInfo.condition?.period,\n        trialPeriod: planInfo.trial_period?.period,\n        trialCount: planInfo.trial_period?.count,\n        trialPrice: planInfo.trial_period?.price,\n        tariffID: planInfo.id,\n        name: {title},\n      }));\n    }\n  \n    onPlanSelect({\n      count: planInfo?.trial_period?.count,\n      period: planInfo?.trial_period?.period,\n      price: planInfo?.trial_period?.price,\n    });\n\n  };\n\n  useEffect(() => {\n    dispatch(getPlanInfo(serviceID, planId));\n  }, [serviceID, dispatch, planId]);\n\n  const isLoading = useAppSelector((state) => state.selectedPlanInfo.isLoading);\n\n  const hasSpecialCondition =\n    planInfo?.special_condition?.count !== undefined &&\n    planInfo.special_condition.count !== 0;\n\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const [formattedDescription, setFormattedDescription] = useState(\"\");\n\n  useEffect(() => {\n    if (planInfo?.description) {\n      const formatted = formatDescription(planInfo?.description);\n      setFormattedDescription(formatted);\n    }\n  }, [planInfo?.description]);\n\n\n  const formattedMessage = (\n    <div className={PlanCardStyles.modalWrapper}>\n      <h5 className={PlanCardStyles.modalTitle}>Что входит в подписку?</h5>\n      <p className={PlanCardStyles.planTitle}>{planTitle}</p>\n      <div className={PlanCardStyles.includesList}>\n        <div className={PlanCardStyles.modalContentTextTariff}\n          dangerouslySetInnerHTML={{ __html: formattedDescription }}\n        />\n      </div>\n      <CustomButton\n        buttonName={\"Понятно\"}\n        backgroundColor={variables.mainBackgroundColor}\n        color={variables.mainTextFontColor}\n        borderColor={variables.buttonBorderColor}\n        onClick={() => setSnackbarOpen(false)}\n      />\n    </div>\n  );\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={PlanCardStyles.planItemWrapper}>\n      <button\n        type=\"button\"\n        className={PlanCardStyles.infoButton}\n        onClick={() => setSnackbarOpen(true)}\n      >\n        <img src={infoIcon} alt=\"Информация о тарифе.\" />\n      </button>\n      <h2 className={PlanCardStyles.planTitle}>{planTitle}</h2>\n      {planInfo?.condition && (\n        <span className={PlanCardStyles.totalPriceWrapper}>\n          <p className={PlanCardStyles.priceTitle}>\n            {planInfo.condition.price} ₽\n          </p>\n          <p className={PlanCardStyles.pricePeriod}>\n            за {planInfo.condition.count}{\" \"}\n            {planInfo.condition?.period?.toLowerCase()}\n          </p>\n        </span>\n      )}\n\n      {hasSpecialCondition ? (\n        <p className={PlanCardStyles.priceDescription}>\n          первый {planInfo.special_condition?.period?.toLocaleLowerCase()} за \n          {planInfo.special_condition?.price} ₽, далее —{\" \"}\n          {planInfo.condition?.price} ₽⁠/\n          {planInfo.condition?.period?.toLowerCase()}\n        </p>\n      ) : null}\n\n      {planInfo?.trial_period && (\n        <span className={PlanCardStyles.giftDescription}>\n          <img src={giftIcon} alt=\"\" />\n          {planInfo.trial_period?.count}{\" \"}\n          {planInfo.trial_period?.period?.toLocaleLowerCase()} за{\" \"}\n          {planInfo.trial_period?.price} ₽\n        </span>\n      )}\n\n<CustomButton\n        buttonName={isSelected ? \"Выбрано\" : \"Выбрать\"}\n        backgroundColor={isSelected ? variables.planSelectedBackground : variables.mainBackgroundColor}\n        color={isSelected ? variables.planSelectedTextColor : variables.mainTextFontColor}\n        borderColor={isSelected ? variables.planSelectedBackground : variables.buttonBorderColor}\n        onClick={handlePlanSelect}\n        style={{ padding: '10px 20px' }}\n      />\n\n      <Modal\n        open={snackbarOpen}\n        onClose={() => setSnackbarOpen(false)}\n        message={formattedMessage}\n      />\n    </div>\n  );\n}\n\nexport default PlanCard;\n","import { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getPlanInfoRequest,\n    getPlanInfoSuccess,\n    getPlanInfoFailed,\n} from \"../slices/planInfoSlice\";\n\n/**\n * Thunk function for fetching selected plan info and dispatching it to the store.\n * If the request is successful, the fetched selected plan info\n * is dispatched to the store using the `getPlanInfoSuccess` action.\n * \n * @param {string} serviceID - ID of selected service.\n * @param {string} planID - ID of selected service plan.\n * @example\n * // Dispatch function to selected plan info and update the state in Redux\n * dispatch(getPlanInfo('12345', '123'));\n */\n\nexport const getPlanInfo = (serviceID: string | undefined, planID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getPlanInfoRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getPlanInfoFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const response = await fetchWithRefresh(`${BASE_URL}/services/${serviceID}/tariffs/${planID}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getPlanInfoSuccess({ planId: planID, info: response }));\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(\"An unexpected error occurred:\", err.message);\n      dispatch(getPlanInfoFailed(err.message));\n    } else {\n      console.error(\"An unexpected error occurred:\", err);\n      dispatch(getPlanInfoFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"mainBackgroundColor\":\"#fff\",\"mainButtonColor\":\"#fee600\",\"mainTextFontColor\":\"#2b2d33\",\"additionalTextColor\":\"#aaabad\",\"buttonBorderColor\":\"#d5d5d6\",\"descriptionTextColor\":\"#282b2e\",\"suspendButtonText\":\"#ee505a\",\"suspendButtonBackgroundColor\":\"#fdeeee\",\"priceIconColor\":\"#7dd27c\",\"planSelectedBackground\":\"#fff4e8\",\"planSelectedTextColor\":\"#fcb664\",\"serviceIncludesWrapper\":\"serviceIncludes_serviceIncludesWrapper__kldm0\",\"includesList\":\"serviceIncludes_includesList__FTQzH\",\"includesTitle\":\"serviceIncludes_includesTitle__q016C\",\"typeIncludesTitle\":\"serviceIncludes_typeIncludesTitle__u0Cn2\",\"includesItem\":\"serviceIncludes_includesItem__EQ2A2\",\"showMoreButton\":\"serviceIncludes_showMoreButton__YnsHu\",\"serviceInfo\":\"serviceIncludes_serviceInfo__B6UD5\",\"expanded\":\"serviceIncludes_expanded__7fHHW\"};","import React, { useEffect, useState } from \"react\";\nimport ServiceIncludesStyles from \"./serviceIncludes.module.scss\";\nimport {\n  getPopularImages,\n  getExclusiveImages,\n} from \"../../../../redux_services/selectors\";\nimport { useAppSelector } from \"../../../../utils/hooks\";\nimport { formatDescription } from \"../../../../utils/formats\";\n\ninterface ServiceIncludesProps {\n  includesDescription: string;\n}\n\nfunction ServiceIncludes({ includesDescription }: ServiceIncludesProps) {\n  const popular = useAppSelector(getPopularImages);\n  const exclusive = useAppSelector(getExclusiveImages);\n\n  const [formattedDescription, setFormattedDescription] = useState(\"\");\n\n  useEffect(() => {\n    if (includesDescription) {\n      const formatted = formatDescription(includesDescription);\n      setFormattedDescription(formatted);\n    }\n  }, [includesDescription]);\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  function toggleDescription() {\n    setIsExpanded(!isExpanded);\n  }\n\n  return (\n    <section className={ServiceIncludesStyles.serviceIncludesWrapper}>\n      <h2 className={ServiceIncludesStyles.includesTitle}>Сервис включает</h2>\n      <div>\n        <h3 className={ServiceIncludesStyles.typeIncludesTitle}>Эксклюзивы</h3>\n        <ul className={ServiceIncludesStyles.includesList}>\n          {exclusive\n            ? exclusive.map((poster) => {\n                return (\n                  <li\n                    className={ServiceIncludesStyles.includesItem}\n                    key={poster.id}\n                  >\n                    <img alt={poster.image} src={poster.image} />\n                  </li>\n                );\n              })\n            : null}\n        </ul>\n      </div>\n\n      <div>\n        <h3 className={ServiceIncludesStyles.typeIncludesTitle}>Популярное</h3>\n        <ul className={ServiceIncludesStyles.includesList}>\n          {popular\n            ? popular.map((poster) => {\n                return (\n                  <li\n                    className={ServiceIncludesStyles.includesItem}\n                    key={poster.id}\n                  >\n                    <img alt={poster.image} src={poster.image} />\n                  </li>\n                );\n              })\n            : null}\n        </ul>\n      </div>\n\n      <div>\n        <h3 className={ServiceIncludesStyles.typeIncludesTitle}>Описание</h3>\n\n        <div\n          className={`${ServiceIncludesStyles.serviceInfo} ${\n            isExpanded ? ServiceIncludesStyles.expanded : \"\"\n          }`}\n          dangerouslySetInnerHTML={{ __html: formattedDescription }}\n        />\n        <button\n          type=\"button\"\n          className={ServiceIncludesStyles.showMoreButton}\n          onClick={toggleDescription}\n        >\n          {isExpanded ? null : \"Развернуть полное описание\"}\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default ServiceIncludes;\n","import React, { useEffect, useState } from \"react\";\nimport Navigation from \"../../../global-components/Navigation/Navigation\";\nimport PageStyles from \"../styles/new-user-styles.module.scss\";\nimport PlanCard from \"../components/PlanCard/PlanCard\";\nimport ServiceIncludes from \"../components/serviceIncludes/serviceIncludes\";\nimport Faq from \"../components/FAQ/Faq\";\nimport CustomButton from \"../../../global-components/Button/Button\";\nimport variables from \"../../../styles-utils/variables.scss\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  getInactiveServiceDetails,\n  getSelectedServicePlans,\n  getCategories,\n} from \"../../../redux_services/selectors\";\nimport { useAppSelector } from \"../../../utils/hooks\";\nimport { getInactiveServiceInfo } from \"../../../redux_services/thunk-functions/getInactiveServiceInfo\";\nimport { getServicePlans } from \"../../../redux_services/thunk-functions/getServicePlans\";\nimport { useAppDispatch } from \"../../../utils/hooks\";\nimport { AppDispatch } from \"../../../redux_services/store\";\nimport { getServiceCategories } from \"../../../redux_services/thunk-functions/getServiceCategories\";\nimport { getPopularPosters } from \"../../../redux_services/thunk-functions/getPopularPosters\";\nimport { getExclusivePosters } from \"../../../redux_services/thunk-functions/getExclusivePosters\";\nimport { clearAllPosters } from \"../../../redux_services/slices/categoryPostersSlice\";\nimport CircularProgress from \"../../../global-components/Loading/Loading\";\nimport { clearInactiveServiceInfo } from \"../../../redux_services/slices/userInactiveServiceSlice\";\nimport { clearServiceCategories } from \"../../../redux_services/slices/serviceCategoriesSlice\";\nimport { IPlanCondition } from \"../../../utils/types\";\nimport { clearAllPlanInfo } from \"../../../redux_services/slices/planInfoSlice\";\nimport { getClearServicePlans } from \"../../../redux_services/slices/servicePlansSlice\";\n\nfunction ServicePage() {\n  const dispatch: AppDispatch = useAppDispatch();\n\n  const [selectedPlanId, setSelectedPlanId] = useState<string | null>(null);\n  const [selectedPlanDetails, setSelectedPlanDetails] =\n    useState<IPlanCondition | null>(null);\n\n  const handlePlanSelect = (planDetails: IPlanCondition) => {\n    setSelectedPlanDetails(planDetails);\n  };\n\n  const serviceInfo = useAppSelector(getInactiveServiceDetails);\n  const servicePlans = useAppSelector(getSelectedServicePlans);\n  const categories = useAppSelector(getCategories);\n\n  const isLoadingInactiveServiceInfo = useAppSelector(\n    (state) => state.inactiveServiceInfo.isLoading\n  );\n  const isLoadingServicePlans = useAppSelector(\n    (state) => state.servicePlans.isLoading\n  );\n  const isLoadingServiceCategories = useAppSelector(\n    (state) => state.serviceCategories.isLoading\n  );\n\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n  const isLoading =\n    isLoadingInactiveServiceInfo &&\n    isLoadingServicePlans &&\n    isLoadingServiceCategories;\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    dispatch(getInactiveServiceInfo(id));\n    dispatch(getServicePlans(id));\n    dispatch(getServiceCategories(id));\n\n    return () => {\n      dispatch(clearAllPosters());\n      dispatch(clearInactiveServiceInfo());\n      dispatch(clearServiceCategories());\n      dispatch(clearAllPlanInfo());\n      dispatch(getClearServicePlans());\n    };\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (categories.length > 0) {\n      const exclusiveID = categories.find((category) =>\n        category.name.includes(\"Эксклюзивы\")\n      )?.id;\n      const popularID = categories.find((category) =>\n        category.name.includes(\"Популярное\")\n      )?.id;\n\n      if (exclusiveID) {\n        dispatch(getExclusivePosters(id, exclusiveID));\n      }\n      if (popularID) {\n        dispatch(getPopularPosters(id, popularID));\n      }\n    }\n  }, [id, dispatch, categories]);\n  \n\n  if (isLoading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div className={PageStyles.page_wrapperCard}>\n      <div className={PageStyles.navWrapper}>\n        <Navigation color=\"primary\" pageName={serviceInfo.name} path=\"/main\" />\n      </div>\n      <div className={PageStyles.basicInfoWrapper}>\n        <div className={PageStyles.logoWrapper}>\n          <img alt={`Логотип ${serviceInfo.name}`} src={serviceInfo.logo} />\n        </div>\n        <div className={PageStyles.namePriceInfoWrapper}>\n            <h1 className={PageStyles.serviceTitle}>{serviceInfo.full_name}</h1>\n            <p\n  className={PageStyles.serviceBrief}> {serviceInfo.short_description} </p>\n          <ul className={PageStyles.pricesWrapper}>\n            <li className={`${PageStyles.pricesItem} ${PageStyles.cashback}`}>\n              <span className={PageStyles.cashbackText}>\n                кешбек {serviceInfo.cashback}%\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <ul className={PageStyles.plansList}>\n        {servicePlans.map((plan) => (\n          <li key={plan.id}>\n            <PlanCard\n              planTitle={plan.name}\n              logo={serviceInfo.logo}\n              title={serviceInfo.name}\n              planDescription={plan.description}\n              planId={plan.id}\n              serviceID={id}\n              isSelected={plan.id === selectedPlanId}\n              onSelect={() => {\n                setSelectedPlanId(plan.id);\n              }}\n              onPlanSelect={(planDetails) => {\n                setSelectedPlanId(plan.id);\n                handlePlanSelect(planDetails);\n                setErrorMessage(\"\");\n              }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <ServiceIncludes includesDescription={serviceInfo.description} />\n      <Faq />\n\n      <div className={PageStyles.forwardButtonWrapper}>\n        {selectedPlanId !== null ? (\n          <Link to=\"/subscription\">\n            <CustomButton\n              buttonName={\n                selectedPlanDetails\n                  ? `Подключить ${\n                      selectedPlanDetails.count\n                    } ${selectedPlanDetails.period?.toLocaleLowerCase()} за ${\n                      selectedPlanDetails.price\n                    } ₽`\n                  : \"Подключить\"\n              }\n              backgroundColor={variables.mainButtonColor}\n              color={variables.mainTextFontColor}\n            />\n          </Link>\n        ) : (\n          <div>\n            {errorMessage ? (\n              <div className={PageStyles.forwardButtonError}>\n                {errorMessage}\n              </div>\n            ) : null}\n            <CustomButton\n              buttonName={\n                selectedPlanDetails\n                  ? `Подключить ${\n                      selectedPlanDetails.count\n                    } ${selectedPlanDetails.period?.toLocaleLowerCase()} за ${\n                      selectedPlanDetails.price\n                    } ₽`\n                  : \"Подключить\"\n              }\n              backgroundColor={variables.mainButtonColor}\n              color={variables.mainTextFontColor}\n              onClick={() => setErrorMessage(\"Сначала выберите тариф\")}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ServicePage;\n","import { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getServicePlansRequest,\n    getServicePlansSuccess,\n    getServicePlansFailed,\n} from \"../slices/servicePlansSlice\";\n\n/**\n * Thunk function for fetching selected service's plans and dispatching it to the store.\n * If the request is successful, the fetched service's plans\n * are dispatched to the store using the `getServicePlansSuccess` action.\n * \n * @param {string} serviceID - ID of selected service.\n *\n * @example\n * // Dispatch function to get service's plans and update the state in Redux\n * dispatch(getServicePlans('12345'));\n */\n\nexport const getServicePlans = (serviceID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getServicePlansRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getServicePlansFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const response = await fetchWithRefresh(`${BASE_URL}/services/${serviceID}/tariffs/`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getServicePlansSuccess(response));\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(\"An unexpected error occurred:\", err.message);\n      dispatch(getServicePlansFailed(err.message));\n    } else {\n      console.error(\"An unexpected error occurred:\", err);\n      dispatch(getServicePlansFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n","import { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getServiceCategoriesRequest,\n    getServiceCategoriesSuccess,\n    getServiceCategoriesFailed,\n} from \"../slices/serviceCategoriesSlice\";\n\n/**\n * Thunk function for fetching service available categories and dispatching it to the store.\n * If the request is successful, the fetched categories\n * are dispatched to the store using the `getServiceCategoriesSuccess` action.\n * \n * @param {string} serviceID - ID of selected service.\n *\n * @example\n * // Dispatch function to get service available categories and update the state in Redux\n * dispatch(getServiceCategories('12345'));\n */\n\nexport const getServiceCategories = (serviceID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getServiceCategoriesRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getServiceCategoriesFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const serviceCategories = await fetchWithRefresh(`${BASE_URL}/services/${serviceID}/image-categories/`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getServiceCategoriesSuccess(serviceCategories));\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(\"An unexpected error occurred:\", err.message);\n      dispatch(getServiceCategoriesFailed(err.message));\n    } else {\n      console.error(\"An unexpected error occurred:\", err);\n      dispatch(getServiceCategoriesFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n","import { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getCategoryPostersRequest,\n    getExclusivePostersSuccess,\n    getCategoryPostersFailed,\n} from \"../slices/categoryPostersSlice\";\n\n/**\n * Thunk function for fetching posters and dispatching it to the store.\n * If the request is successful, the fetched posters\n * are dispatched to the store using the `getCategoryPostersSuccess` action.\n * \n * @param {string} serviceID - ID of selected service.\n * @param {string} categoryID - ID of selected category.\n *\n * @example\n * // Dispatch function to get posters and update the state in Redux\n * dispatch(getCategoryPosters('12345', '123'));\n */\n\nexport const getExclusivePosters = (serviceID: string | undefined, categoryID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getCategoryPostersRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getCategoryPostersFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const posters = await fetchWithRefresh(`${BASE_URL}/services/${serviceID}/image-categories/${categoryID}/images`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getExclusivePostersSuccess(posters));\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(\"An unexpected error occurred:\", err.message);\n      dispatch(getCategoryPostersFailed(err.message));\n    } else {\n      console.error(\"An unexpected error occurred:\", err);\n      dispatch(getCategoryPostersFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n","import { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getCategoryPostersRequest,\n    getPopularPostersSuccess,\n    getCategoryPostersFailed,\n} from \"../slices/categoryPostersSlice\";\n\n/**\n * Thunk function for fetching posters and dispatching it to the store.\n * If the request is successful, the fetched posters\n * are dispatched to the store using the `getCategoryPostersSuccess` action.\n * \n * @param {string} serviceID - ID of selected service.\n * @param {string} categoryID - ID of selected category.\n *\n * @example\n * // Dispatch function to get posters and update the state in Redux\n * dispatch(getCategoryPosters('12345', '123'));\n */\n\nexport const getPopularPosters = (serviceID: string | undefined, categoryID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getCategoryPostersRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getCategoryPostersFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const posters = await fetchWithRefresh(`${BASE_URL}/services/${serviceID}/image-categories/${categoryID}/images`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getPopularPostersSuccess(posters));\n  } catch (err) {\n    if (err instanceof Error) {\n      dispatch(getCategoryPostersFailed(err.message));\n    } else {\n      dispatch(getCategoryPostersFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n"],"names":["_ref","_planInfo$special_con","_planInfo$condition3","_planInfo$condition3$","_planInfo$special_con2","_planInfo$special_con3","_planInfo$special_con4","_planInfo$condition4","_planInfo$condition5","_planInfo$condition5$","_planInfo$trial_perio7","_planInfo$trial_perio8","_planInfo$trial_perio9","_planInfo$trial_perio10","planTitle","planDescription","planId","title","serviceID","isSelected","onSelect","onPlanSelect","logo","dispatch","useAppDispatch","planInfo","useAppSelector","state","getSelectedPlanInfo","useEffect","getPlanInfo","planID","async","getPlanInfoRequest","accessToken","getCookie","console","error","getPlanInfoFailed","response","fetchWithRefresh","concat","BASE_URL","method","headers","Authorization","getPlanInfoSuccess","info","err","Error","message","isLoading","selectedPlanInfo","hasSpecialCondition","undefined","special_condition","count","snackbarOpen","setSnackbarOpen","useState","formattedDescription","setFormattedDescription","description","formatted","formatDescription","formattedMessage","_jsxs","className","PlanCardStyles","children","_jsx","dangerouslySetInnerHTML","__html","CustomButton","buttonName","backgroundColor","variables","mainBackgroundColor","color","mainTextFontColor","borderColor","buttonBorderColor","onClick","Loading","type","src","infoIcon","alt","condition","price","period","toLowerCase","toLocaleLowerCase","trial_period","giftIcon","planSelectedBackground","planSelectedTextColor","handlePlanSelect","_planInfo$trial_perio4","_planInfo$trial_perio5","_planInfo$trial_perio6","_planInfo$condition","_planInfo$condition2","_planInfo$trial_perio","_planInfo$trial_perio2","_planInfo$trial_perio3","getSubscription","trialPeriod","trialCount","trialPrice","tariffID","id","name","style","padding","Modal","open","onClose","includesDescription","popular","getPopularImages","exclusive","getExclusiveImages","isExpanded","setIsExpanded","ServiceIncludesStyles","map","poster","image","_selectedPlanDetails$","_selectedPlanDetails$2","selectedPlanId","setSelectedPlanId","selectedPlanDetails","setSelectedPlanDetails","serviceInfo","getInactiveServiceDetails","servicePlans","getSelectedServicePlans","categories","getCategories","isLoadingInactiveServiceInfo","inactiveServiceInfo","isLoadingServicePlans","isLoadingServiceCategories","serviceCategories","errorMessage","setErrorMessage","useParams","getInactiveServiceInfo","getServicePlansRequest","getServicePlansFailed","getServicePlansSuccess","getServiceCategoriesRequest","getServiceCategoriesFailed","getServiceCategoriesSuccess","getServiceCategories","clearAllPosters","clearInactiveServiceInfo","clearServiceCategories","clearAllPlanInfo","getClearServicePlans","length","_categories$find","_categories$find2","exclusiveID","find","category","includes","popularID","categoryID","getCategoryPostersRequest","getCategoryPostersFailed","posters","getExclusivePostersSuccess","getPopularPosters","getPopularPostersSuccess","getExclusivePosters","CircularProgress","PageStyles","page_wrapperCard","navWrapper","Navigation","pageName","path","basicInfoWrapper","logoWrapper","namePriceInfoWrapper","serviceTitle","full_name","serviceBrief","short_description","pricesWrapper","pricesItem","cashback","cashbackText","plansList","plan","PlanCard","planDetails","ServiceIncludes","Faq","forwardButtonWrapper","Link","to","mainButtonColor","forwardButtonError"],"sourceRoot":""}