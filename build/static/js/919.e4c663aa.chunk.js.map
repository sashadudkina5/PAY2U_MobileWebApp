{"version":3,"file":"static/js/919.e4c663aa.chunk.js","mappings":"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","sources":["features/active-user/pages/active-subscription.tsx","redux_services/thunk-functions/getSubscriptionInfo.ts"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navigation from \"../../../global-components/Navigation/Navigation\";\nimport PageStyles from \"../styles/active-user-styles.module.scss\";\nimport CustomButton from \"../../../global-components/Button/Button\";\nimport variables from \"../../../styles-utils/variables.scss\";\nimport Modal from \"../../../global-components/Modal/Modal\";\nimport { paymentData } from \"../../../utils/billingData\";\nimport { useAppDispatch, useAppSelector } from \"../../../utils/hooks\";\nimport { AppDispatch } from \"../../../redux_services/store\";\nimport {\n  getCatalogList,\n  getInactiveServiceDetails,\n} from \"../../../redux_services/selectors\";\nimport { useParams } from \"react-router-dom\";\nimport { getSubscriptionInfo } from \"../../../redux_services/thunk-functions/getSubscriptionInfo\";\nimport { getSelectedSubscriptionInfo } from \"../../../redux_services/selectors\";\nimport { calculateDaysUntil, formatDate } from \"../../../utils/formats\";\nimport { getInactiveServiceInfo } from \"../../../redux_services/thunk-functions/getInactiveServiceInfo\";\n\nfunction ActiveSubscription() {\n  const dispatch: AppDispatch = useAppDispatch();\n\n  const { id } = useParams();\n\n  const selectedSubscription = useAppSelector(getSelectedSubscriptionInfo);\n\n  useEffect(() => {\n    dispatch(getSubscriptionInfo(id));\n  }, [dispatch, id]);\n\n  const selectedService = useAppSelector((state) =>\n    getCatalogList(state).filter(\n      (item) => item.name === selectedSubscription.service_name\n    )\n  );\n  const [hasFetched, setHasFetched] = useState(false);\n\n  const serviceInfo = useAppSelector(getInactiveServiceDetails);\n\n  useEffect(() => {\n    if (selectedService[0]?.id && !hasFetched) {\n      dispatch(getInactiveServiceInfo(selectedService[0].id));\n      setHasFetched(true);\n    }\n  }, [dispatch, selectedService, hasFetched]);\n\n  const paymentItem = paymentData[0];\n  const [snackbarOpenHowTo, setSnackbarOpenHowTo] = useState(false);\n  const [snackbarOpenDisable, setSnackbarDisable] = useState(false);\n\n  const sectionStyle = {\n    backgroundImage: `url(${selectedSubscription.logo})`,\n  };\n\n  const formattedMessageHowTo = (\n    <div>\n      <h2 className={PageStyles.modalTitle}>Как пользоваться?</h2>\n      <p className={PageStyles.modalDescription}>\n        Инструкция по работе с сервисом\n      </p>\n      <div className={PageStyles.modalContentWrapper}>\n        <p className={PageStyles.modalContent}>\n          1. После подключения подписки, перейдите на страницу входа{\" \"}\n          <a href={serviceInfo.url} className={PageStyles.linkPolicy}>\n            {\" \"}\n            на сайте {selectedSubscription.service_name}\n          </a>\n        </p>\n\n        <p className={PageStyles.modalContent}>\n          2. Авторизуйтесь по номеру телефона, который был указан при\n          подключении подписки (пароль будет необходимо восстановить)\n        </p>\n      </div>\n      <CustomButton\n        buttonName={\"Понятно\"}\n        backgroundColor={variables.mainBackgroundColor}\n        color={variables.mainTextFontColor}\n        borderColor={variables.buttonBorderColor}\n        onClick={() => setSnackbarOpenHowTo(false)}\n      />\n    </div>\n  );\n\n  const formattedMessageDisable = (\n    <div>\n      <h2 className={PageStyles.modalTitle}>\n        Отключить автопродление подписки?\n      </h2>\n      <div className={PageStyles.modalDisableListWrapper}>\n        <div\n          className={`${PageStyles.modalDisableList} + ${PageStyles.subscriptionPeriodActive}`}\n        >\n          <p className={PageStyles.modalContent}>\n            Подписка будет действовать до {selectedSubscription.end_date}\n          </p>\n        </div>\n\n        <div\n          className={`${PageStyles.modalDisableList} + ${PageStyles.subscriptionGetBack}`}\n        >\n          <p className={PageStyles.modalContent}>\n            Если вы захотите ее вернуть она будет доступна в разделе Мои\n            подписки / Недействующие\n          </p>\n        </div>\n      </div>\n\n      <div className={PageStyles.modalDisableButtonsWrapper}>\n        <CustomButton\n          buttonName={\"Пока оставить\"}\n          backgroundColor={variables.mainButtonColor}\n          color={variables.mainTextFontColor}\n          onClick={() => setSnackbarDisable(false)}\n        />\n\n        <CustomButton\n          buttonName={\"Все равно отключить\"}\n          backgroundColor={variables.mainBackgroundColor}\n          color={variables.mainTextFontColor}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={PageStyles.activeSubscriptionPageWrapper}>\n      <section\n        style={sectionStyle}\n        className={PageStyles.activeSubscriptionLogoSection}\n      >\n        <div className={PageStyles.activeSubscriptionNavWrapper}>\n          <Navigation\n            color=\"primary\"\n            pageName={\"\"}\n            backgroundColor=\"#FFFFFF\"\n            borderRadius=\"60px\"\n            path=\"/main/\"\n          />\n        </div>\n      </section>\n\n      <section className={PageStyles.activeSubscriptionMainContent}>\n        <div className={PageStyles.activeSubscriptionBasicWrapper}>\n          <div className={PageStyles.activeSubscriptionBasicInfo}>\n            <h1 className={PageStyles.activeSubscriptionTitle}>\n              {selectedSubscription.service_name}\n            </h1>\n            <p className={PageStyles.activeSubscriptionPlan}>\n              {selectedSubscription.tariff_name}\n            </p>\n          </div>\n\n          <div className={PageStyles.activeSubscriptionCashback}>\n            <span className={PageStyles.activeSubscriptionCashbackSum}>\n              кешбэк {selectedSubscription.cashback} %\n            </span>\n          </div>\n\n          <div className={PageStyles.activeSubscriptionNext}>\n            <p className={PageStyles.activeSubscriptionNextPeriod}>\n              Следующее списание{\" \"}\n              {calculateDaysUntil(selectedSubscription.payment_date)} дней\n            </p>\n          </div>\n        </div>\n\n        <div className={PageStyles.activeSubscriptionDetailsWrapper}>\n          <dl className={PageStyles.activeSubscriptionDetails}>\n            <div className={PageStyles.detailsWrapper}>\n              <dt>Стоимость подписки</dt>\n              <dd> {selectedSubscription.price} ₽</dd>\n            </div>\n            <div\n              className={`${PageStyles.detailsWrapper} + ${PageStyles.detailsTrialPeriod}`}\n            >\n              <dt>Пробный период до</dt>\n              <dd>{formatDate(selectedSubscription.trial_period_end_date)}</dd>\n            </div>\n            <div className={PageStyles.detailsWrapper}>\n              <dt>Следующее списание</dt>\n              <dd>{formatDate(selectedSubscription.payment_date)}</dd>\n            </div>\n            <div className={PageStyles.detailsWrapper}>\n              <dt>Номер телефона</dt>\n              <dd>{selectedSubscription.phone_number}</dd>\n            </div>\n            <div className={PageStyles.detailsWrapper}>\n              <dt>Счет списания</dt>\n\n              <dd>\n                <img src={paymentItem.iconNoBackground} alt=\"Счет списания\" />\n              </dd>\n            </div>\n          </dl>\n        </div>\n      </section>\n\n      <div className={PageStyles.activeSubscriptionBottomNavWrapper}>\n        <CustomButton\n          buttonName={\"Как пользоваться?\"}\n          backgroundColor={variables.mainButtonColor}\n          color={variables.mainTextFontColor}\n          onClick={() => setSnackbarOpenHowTo(true)}\n        />\n\n        <CustomButton\n          buttonName={\"Отключить автопродление\"}\n          backgroundColor={variables.suspendButtonBackgroundColor}\n          color={variables.suspendButtonText}\n          onClick={() => setSnackbarDisable(true)}\n        />\n      </div>\n\n      <Modal\n        open={snackbarOpenHowTo}\n        onClose={() => setSnackbarOpenHowTo(false)}\n        message={formattedMessageHowTo}\n      />\n\n      <Modal\n        open={snackbarOpenDisable}\n        onClose={() => setSnackbarDisable(false)}\n        message={formattedMessageDisable}\n      />\n    </div>\n  );\n}\n\nexport default ActiveSubscription;\n","import { checkResponse } from \"../../utils/api\";\nimport { BASE_URL } from \"../../utils/api\";\nimport { AppDispatch } from \"../store\";\nimport { getCookie, fetchWithRefresh } from \"../../utils/api\";\nimport {\n    getSubscriptionInfoRequest,\n    getSubscriptionInfoSuccess,\n    getSubscriptionInfoFailed,\n} from \"../slices/subsrcriptionInfoSlice\";\n\n/**\n * Thunk function for fetching selected subscription info and dispatching it to the store.\n * If the request is successful, the fetched selected subscription info\n * is dispatched to the store using the `getSubscriptionInfoSuccess` action.\n * \n * @param {string} subscriptionID - ID of selected subscription.\n * @example\n * // Dispatch function to selected subscription info and update the state in Redux\n * dispatch(getSubscriptionInfo('12345'));\n */\n\nexport const getSubscriptionInfo = (subscriptionID: string | undefined) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getSubscriptionInfoRequest());\n    const accessToken = getCookie(\"accessToken\");\n\n    if (!accessToken) {\n      console.error(\"AccessToken is missing\");\n      dispatch(getSubscriptionInfoFailed(\"AccessToken is missing\"));\n      return;\n    }\n\n    const subscriptionInfo = await fetchWithRefresh(`${BASE_URL}/subscriptions/${subscriptionID}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    dispatch(getSubscriptionInfoSuccess(subscriptionInfo));\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(\"An unexpected error occurred:\", err.message);\n      dispatch(getSubscriptionInfoFailed(err.message));\n    } else {\n      console.error(\"An unexpected error occurred:\", err);\n      dispatch(getSubscriptionInfoFailed(\"An unknown error occurred\"));\n    }\n  }\n};\n"],"names":["dispatch","useAppDispatch","id","useParams","selectedSubscription","useAppSelector","getSelectedSubscriptionInfo","useEffect","subscriptionID","async","getSubscriptionInfoRequest","accessToken","getCookie","console","error","getSubscriptionInfoFailed","subscriptionInfo","fetchWithRefresh","concat","BASE_URL","method","headers","Authorization","getSubscriptionInfoSuccess","err","Error","message","selectedService","state","getCatalogList","filter","item","name","service_name","hasFetched","setHasFetched","useState","serviceInfo","getInactiveServiceDetails","_selectedService$","getInactiveServiceInfo","paymentItem","paymentData","snackbarOpenHowTo","setSnackbarOpenHowTo","snackbarOpenDisable","setSnackbarDisable","sectionStyle","backgroundImage","logo","formattedMessageHowTo","_jsxs","children","_jsx","className","PageStyles","modalTitle","modalDescription","modalContentWrapper","modalContent","href","url","linkPolicy","CustomButton","buttonName","backgroundColor","variables","mainBackgroundColor","color","mainTextFontColor","borderColor","buttonBorderColor","onClick","formattedMessageDisable","modalDisableListWrapper","modalDisableList","subscriptionPeriodActive","end_date","subscriptionGetBack","modalDisableButtonsWrapper","mainButtonColor","activeSubscriptionPageWrapper","style","activeSubscriptionLogoSection","activeSubscriptionNavWrapper","Navigation","pageName","borderRadius","path","activeSubscriptionMainContent","activeSubscriptionBasicWrapper","activeSubscriptionBasicInfo","activeSubscriptionTitle","activeSubscriptionPlan","tariff_name","activeSubscriptionCashback","activeSubscriptionCashbackSum","cashback","activeSubscriptionNext","activeSubscriptionNextPeriod","calculateDaysUntil","payment_date","activeSubscriptionDetailsWrapper","activeSubscriptionDetails","detailsWrapper","price","detailsTrialPeriod","formatDate","trial_period_end_date","phone_number","src","iconNoBackground","alt","activeSubscriptionBottomNavWrapper","suspendButtonBackgroundColor","suspendButtonText","Modal","open","onClose"],"sourceRoot":""}